name: CI Pipeline

on:
  push:
    branches: [ main, develop, stage2 ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend CI Job
  backend-ci:
    name: Backend CI - Build, Lint & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    defaults:
      run:
        working-directory: ./BACKEND
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ./BACKEND/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint --if-present
        continue-on-error: true
      
      - name: Run unit tests
        run: npm test --if-present
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ secrets.MONGODB_TEST_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
      
      - name: Build backend
        run: npm run build --if-present
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18.x'
        with:
          files: ./BACKEND/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend CI Job
  frontend-ci:
    name: Frontend CI - Build, Lint & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    defaults:
      run:
        working-directory: ./FRONTEND
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ./FRONTEND/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint --if-present
        continue-on-error: true
      
      - name: Run unit tests
        run: npm test --if-present
      
      - name: Build frontend
        run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == '18.x'
        with:
          name: frontend-build
          path: ./FRONTEND/dist
          retention-days: 7
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18.x'
        with:
          files: ./FRONTEND/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      
      - name: Install backend dependencies
        working-directory: ./BACKEND
        run: npm ci
      
      - name: Run integration tests
        working-directory: ./tests/integration
        run: npm test --if-present
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://test:test@localhost:27017/shackles_test?authSource=admin
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret

  # Code Quality Check
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
      
      - name: Run Prettier check
        run: |
          npm install -g prettier
          prettier --check "**/*.{js,jsx,json,css,md}" || true

  # Notify on completion
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, integration-tests, code-quality]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          echo "CI Pipeline completed!"
          echo "Backend CI: ${{ needs.backend-ci.result }}"
          echo "Frontend CI: ${{ needs.frontend-ci.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
