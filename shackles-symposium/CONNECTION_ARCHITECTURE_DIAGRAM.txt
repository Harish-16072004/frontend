```
╔══════════════════════════════════════════════════════════════════════════════╗
║              HOW FRONTEND, BACKEND & DATABASE CONNECT                         ║
║                        SHACKLES SYMPOSIUM                                     ║
╚══════════════════════════════════════════════════════════════════════════════╝


┌────────────────────────────────────────────────────────────────────────────┐
│                           THE BIG PICTURE                                   │
└────────────────────────────────────────────────────────────────────────────┘

    USER'S BROWSER                YOUR COMPUTER              CLOUD (INTERNET)
┌──────────────────────┐      ┌──────────────────┐      ┌──────────────────┐
│                      │      │                  │      │                  │
│   🌐 FRONTEND        │      │  ⚙️  BACKEND     │      │  🗄️  DATABASE    │
│   (React App)        │◄────►│  (Node.js API)   │◄────►│  (MongoDB)       │
│                      │ HTTP │                  │ CRUD │                  │
│  localhost:5173      │      │  localhost:5000  │      │  Atlas Cloud     │
│                      │      │                  │      │                  │
└──────────────────────┘      └──────────────────┘      └──────────────────┘
   What user sees             Processing logic          Data storage


┌────────────────────────────────────────────────────────────────────────────┐
│                        DETAILED DATA FLOW                                   │
└────────────────────────────────────────────────────────────────────────────┘

STEP 1: User Action
┌───────────────────────────────────────────────────────────────────────┐
│ User clicks "Login" button in browser                                 │
│ Location: http://localhost:5173/login                                 │
└───────────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼
STEP 2: Frontend Sends Request
┌───────────────────────────────────────────────────────────────────────┐
│ React Component (Login.jsx) calls API                                 │
│ Code: axios.post('/auth/login', { email, password })                  │
│                                                                        │
│ Axios Configuration (api.js):                                         │
│ • baseURL: http://localhost:5000/api/v1                              │
│ • Headers: Authorization: Bearer token                                │
│                                                                        │
│ Full URL: http://localhost:5000/api/v1/auth/login                    │
└───────────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼ HTTP POST Request
STEP 3: Backend Receives Request
┌───────────────────────────────────────────────────────────────────────┐
│ Express Server (server.js) receives request                           │
│ Route: POST /api/v1/auth/login                                       │
│                                                                        │
│ Middleware Chain:                                                      │
│ 1. CORS Check ✓ (Is request from localhost:5173?)                    │
│ 2. Body Parser ✓ (Parse JSON data)                                   │
│ 3. Rate Limiter ✓ (Not too many requests?)                           │
│ 4. Routes → authRoutes.js → authController.js                        │
└───────────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼
STEP 4: Backend Processes Logic
┌───────────────────────────────────────────────────────────────────────┐
│ authController.login() function executes:                             │
│                                                                        │
│ 1. Extract email & password from req.body                             │
│ 2. Query database for user                                            │
│ 3. Check if user exists                                               │
│ 4. Compare password (bcrypt)                                          │
│ 5. Generate JWT token                                                 │
│ 6. Prepare response data                                              │
└───────────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼ MongoDB Query
STEP 5: Database Query
┌───────────────────────────────────────────────────────────────────────┐
│ MongoDB Query Executes:                                               │
│                                                                        │
│ User.findOne({ email: 'user@example.com' })                          │
│                                                                        │
│ Connection:                                                            │
│ • Mongoose connects via MONGODB_URI                                   │
│ • Connection string: mongodb+srv://...                                │
│ • Database: shackles_db                                               │
│ • Collection: users                                                   │
│                                                                        │
│ Returns: User document with all fields                                │
└───────────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼ User Data
STEP 6: Backend Sends Response
┌───────────────────────────────────────────────────────────────────────┐
│ Response Data (JSON):                                                  │
│ {                                                                      │
│   "success": true,                                                     │
│   "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",                │
│   "user": {                                                            │
│     "id": "507f1f77bcf86cd799439011",                                 │
│     "name": "John Doe",                                                │
│     "email": "user@example.com",                                       │
│     "role": "user"                                                     │
│   }                                                                    │
│ }                                                                      │
│                                                                        │
│ Status Code: 200 OK                                                   │
└───────────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼ HTTP Response
STEP 7: Frontend Receives Response
┌───────────────────────────────────────────────────────────────────────┐
│ Axios Promise Resolves:                                               │
│                                                                        │
│ const response = await axios.post('/auth/login', data)                │
│                                                                        │
│ Frontend Actions:                                                      │
│ 1. Store token in localStorage                                        │
│ 2. Update AuthContext (global state)                                  │
│ 3. Redirect to dashboard                                              │
│ 4. Show success message                                               │
└───────────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼
STEP 8: UI Updates
┌───────────────────────────────────────────────────────────────────────┐
│ User sees:                                                             │
│ • "Login successful!" message                                         │
│ • Redirected to dashboard page                                        │
│ • Header shows user name                                              │
│ • Profile icon appears                                                │
└───────────────────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────────────────────┐
│                         FILE CONNECTIONS                                    │
└────────────────────────────────────────────────────────────────────────────┘

FRONTEND FILES:
┌────────────────────────────────────────────────────┐
│ frontend/src/pages/Auth/Login.jsx                  │  User clicks button
│           │                                         │
│           ├─► calls api.post('/auth/login')       │
│           │                                         │
│ frontend/src/services/api.js                       │  Axios config
│           │                                         │
│           ├─► baseURL: VITE_API_URL                │  from .env
│           ├─► adds Authorization header            │
│           └─► sends HTTP request                   │
└────────────────────────────────────────────────────┘
                        │
                        │ HTTP
                        ▼
BACKEND FILES:
┌────────────────────────────────────────────────────┐
│ backend/src/server.js                              │  Express app
│           │                                         │
│           ├─► CORS: allows localhost:5173         │
│           ├─► Routes: /api/v1/auth                │
│           │                                         │
│ backend/src/routes/authRoutes.js                   │  Route mapping
│           │                                         │
│           ├─► POST /login → authController.login  │
│           │                                         │
│ backend/src/controllers/authController.js          │  Business logic
│           │                                         │
│           ├─► Calls User.findOne()                │
│           │                                         │
│ backend/src/models/User.js                         │  Database schema
│           │                                         │
│           └─► Mongoose model                       │
└────────────────────────────────────────────────────┘
                        │
                        │ MongoDB Driver
                        ▼
DATABASE:
┌────────────────────────────────────────────────────┐
│ MongoDB Atlas (Cloud)                              │
│           │                                         │
│ Database: shackles_db                              │
│ Collection: users                                   │
│           │                                         │
│ Document: {                                        │
│   _id: ObjectId("..."),                            │
│   name: "John Doe",                                │
│   email: "user@example.com",                       │
│   password: "$2a$10$...",  (hashed)                │
│   role: "user"                                      │
│ }                                                   │
└────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────────────────────┐
│                    ENVIRONMENT VARIABLES CONNECTION                         │
└────────────────────────────────────────────────────────────────────────────┘

frontend/.env:
┌───────────────────────────────────────────┐
│ VITE_API_URL=http://localhost:5000/api/v1│
│              └─────┬──────┘               │
└────────────────────┼──────────────────────┘
                     │ Tells frontend where
                     │ backend is running
                     ▼
backend/.env:
┌───────────────────────────────────────────────────────────────────┐
│ PORT=5000                        Backend runs on this port        │
│ FRONTEND_URL=http://localhost:5173   CORS allows this origin     │
│ MONGODB_URI=mongodb+srv://...        Database connection string   │
│ JWT_SECRET=secret123                 Token encryption key         │
└───────────────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────────────────────┐
│                         AUTHENTICATION FLOW                                 │
└────────────────────────────────────────────────────────────────────────────┘

1. REGISTER NEW USER:
   User Form → Frontend → Backend → Hash Password → Save to MongoDB
                                                           │
                                                           ▼
                                                    Generate JWT Token
                                                           │
                                                           ▼
                                        Return Token → Store in localStorage

2. LOGIN:
   Credentials → Frontend → Backend → Find User in MongoDB
                                              │
                                              ▼
                                      Compare Passwords
                                              │
                                              ▼
                                      Generate JWT Token
                                              │
                                              ▼
                                  Return Token → Store in localStorage

3. AUTHENTICATED REQUESTS:
   Every subsequent request:
   Frontend → Axios Interceptor adds: Authorization: Bearer <token>
          → Backend → JWT Middleware validates token
                 → If valid: Process request
                 → If invalid: Return 401 Unauthorized


┌────────────────────────────────────────────────────────────────────────────┐
│                          PORT CONFIGURATION                                 │
└────────────────────────────────────────────────────────────────────────────┘

Port 5173 (Frontend):
┌────────────────────────────┐
│ http://localhost:5173      │  ← React App (User Interface)
│                            │
│ Files served:              │
│ • HTML, CSS, JavaScript    │
│ • Images, Fonts            │
│ • React Components         │
└────────────────────────────┘

Port 5000 (Backend):
┌────────────────────────────┐
│ http://localhost:5000      │  ← Node.js API Server
│                            │
│ Endpoints:                 │
│ • /api/v1/auth/*           │
│ • /api/v1/users/*          │
│ • /api/v1/events/*         │
│ • /health                  │
└────────────────────────────┘

Port 27017 (MongoDB - if local):
┌────────────────────────────┐
│ mongodb://localhost:27017  │  ← Local MongoDB
│                            │
│ OR                         │
│                            │
│ mongodb+srv://...          │  ← MongoDB Atlas (Cloud)
└────────────────────────────┘


┌────────────────────────────────────────────────────────────────────────────┐
│                        QUICK TROUBLESHOOTING MAP                            │
└────────────────────────────────────────────────────────────────────────────┘

Problem: "Cannot connect to backend"
├─► Check: Is backend running? (Terminal should show "Server: http://...")
├─► Check: Is VITE_API_URL correct in frontend/.env?
├─► Check: Is PORT=5000 in backend/.env?
└─► Fix: Restart both servers

Problem: "Database connection failed"
├─► Check: Is MONGODB_URI correct in backend/.env?
├─► Check: Did you replace <password> with actual password?
├─► Check: Is IP whitelisted in MongoDB Atlas (0.0.0.0/0)?
└─► Fix: Update connection string, restart backend

Problem: "CORS error"
├─► Check: Is FRONTEND_URL=http://localhost:5173 in backend/.env?
├─► Check: Is CORS middleware enabled in server.js?
└─► Fix: Update FRONTEND_URL, restart backend

Problem: "401 Unauthorized"
├─► Check: Is token stored in localStorage?
├─► Check: Is Authorization header sent with request?
├─► Check: Is JWT_SECRET same in .env that generated the token?
└─► Fix: Login again to get new token


┌────────────────────────────────────────────────────────────────────────────┐
│                           STARTUP SEQUENCE                                  │
└────────────────────────────────────────────────────────────────────────────┘

Correct Order:
1. ✅ MongoDB Atlas setup (one-time)
2. ✅ Create .env files (one-time)
3. ✅ npm install (one-time per project)
4. ✅ Start BACKEND first (npm run dev)
5. ✅ Wait for "Database: Connected"
6. ✅ Start FRONTEND (npm run dev)
7. ✅ Open browser: http://localhost:5173

Wrong Order (Common Mistake):
1. ❌ Start frontend first
2. ❌ Frontend tries to connect to backend
3. ❌ Backend not running → Network Error
4. ❌ Start backend later
5. ❌ Frontend still shows error (needs refresh)


┌────────────────────────────────────────────────────────────────────────────┐
│                         SUCCESS INDICATORS                                  │
└────────────────────────────────────────────────────────────────────────────┘

Backend Terminal (All Good):
═══════════════════════════════════════════════
  🚀 SHACKLES 25-26 BACKEND SERVER
═══════════════════════════════════════════════
  ⚡ Server:      http://localhost:5000
  🌍 Environment: development
  📊 Database:    Connected  ← LOOK FOR THIS!
  🔒 CORS:        http://localhost:5173
═══════════════════════════════════════════════

Frontend Terminal (All Good):
  VITE v5.x.x  ready in 500 ms
  ➜  Local:   http://localhost:5173/  ← LOOK FOR THIS!
  ➜  Network: use --host to expose

Browser DevTools Console (All Good):
  (No red error messages)
  Network tab shows:
  • ✅ Status 200/201 for API calls
  • ✅ No CORS errors
  • ✅ Successful responses


╔══════════════════════════════════════════════════════════════════════════════╗
║                            YOU'RE ALL SET! 🎉                                 ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                               ║
║  📚 Full Guide: CONNECTING_GUIDE_FOR_BEGINNERS.md                            ║
║  ⚡ Quick Start: CONNECTION_QUICK_START.md                                   ║
║  🚀 Startup Scripts: start-all.ps1                                           ║
║                                                                               ║
╚══════════════════════════════════════════════════════════════════════════════╝
```
